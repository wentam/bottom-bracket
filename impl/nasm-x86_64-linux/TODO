* Support other brackets ()[]{}<>
* Macroexpansion rework:
  * Each macro just returns an absolute pointer to it's output
  * The byte buffer passed to each macro is just an optional
  pool of memory to play with
    * This doesn't really cost the macroexpander anything because
    we can use a single byte buffer for all macroexpansions and
    just reset it
    * Provides you a pool to store things that we be 'freed'
* Replace -1 as non-expand sigil: should be 0/NULL ptr now
* Make third argument to macros == byte_buffer_get_buf?
  * You could expand macros up to 64 bytes without any function
  calls.
* Does the 'with' macro need to create a new byte buffer for each data entry? Why not just push the data directly to the 'data' byte buffer then free the whole buffer when we're done?
  * Oh, this might be needed b/c we're holding pointers to the data and can't realloc
* remove old with-macros and with
* clean up unused data entries in builtin_structural_macros
* rename withm->with
* implement unified 'with' macro
  * data, functions, macros
  * needed because of memory lifecycle
  * needed so we can (bb/with (include "foo.bbr") my-stuff) and get code data etc
  * only allocate functions as 'executable' memory.
* make an implicit barray-cat for defining macro with with-macros?
* now that builtin macros are called directly, not on the heap, we should be able to call directly everywhere instead of mov rax, foo; call foo
* implement x86_64 assembler (not as a builtin, and in machine code)
* implement bb/include (as a builtin probably)
  * probably use buffered_fd_reader
* implement elf64-relocatable (or maybe just elf-relocatable?)
  * Remove the incomplete builtin one
* don't always malloc executable, make sure macro stack mallocs executable except when serving as data stack
* rework macro interface and all builtins to not use byte_buffer?
  * One thing we could say: if your expansion is less than X bytes, you can just write directly to the buffer. We could even pass you the value of get_buf as your third argument - so you don't need to call any functions at all for small expansions.
  * A macro could just be a pair of functions: the expander ond the cleanup. The expander provides a userdata pointer. Either explicitly two functions, or the expander returns a cleanup function pointer, userdata pointer, and expansion pointer.
* are compare_barrays and barray_equalp the same function? We need to either remove one or document the difference.
* Put barray utility functions into a barray.asm, not util.asm
* make malloc not always executable (split into malloc and malloc_linux as per notes so that public malloc is never executable)
* make macro stack not always executable
* fix kv_stack_pop_by_key
* parray-cat
* implement macroexpand-1 in structural_macro_expand
* build macroexpand "walker" macro that allows you to tap spacebar to macroexpand-1 repeatedly.
   * problem: if I macroexpand-1 a 'with' macro, he greedy macroexpands his children so you can't really watch it go very well. I really want to try to come up with a way to do this nicely. Maybe simply allow you to put bb into a mode where structural_macro_expand always stops prints and waits for spacebar after each expansion. This could be exposed via a (with-macroexpand-walker my-stuff) macro that enters and exits this mode around my-stuff.
* with-namespace
  * (with-namespace x86_64-asm (mov rdi 5) (something-else)) will apply the prefix x86_64-asm to every macro it can where there is a macro defined for that prefix. Meaning it doesn't such something-else, but does touch mov
  * It would only effect locally-visible forms AKA implemented recursively BEFORE macroexpansion
  * builtin because it's needed to make the language practical
* with-namespace-alias
  * (with-namespace-alias (asm x86_64-asm) (asm/mov rdi, 5))
  * It would only effect locally-visible forms AKA implemented recursively BEFORE macroexpansion
  * builtin because it's needed to make the language practical
* namespace all the assembler macros
* builtin function address macro changes:
  * remove "builtin-" prefix - just (bb/func-addr/foo)
  * require the user specifies the platform they want the
  function address for like (bb/func-addr/foo x86_64-linux)
  * See if there's a good way to simplify defining these macros
  inside bb. Maybe use a template macro.
* We probably want the allocator to use thread-local storage to make it thread-safe in case the user spawns threads (even though bb itself is single-threaded right now).
* line numbers in errors
* buffered writer or mmap writer to minimize those syscalls
* Expose all builtin functions that the builtin macros use
* Expose read/print builtin functions.
* Expose all kv_stack functions
* Expose all byte_buffer functions
* Expose access to global kv_stacks (like macro stacks)
* Once we have good line number errors and stuff, we should probably expose a fancy public error-exit function that produces consistent pretty errors with line numbers, macro stack dump etc.
  * Or maybe just expose the component parts - print-macro-stack-trace and print-line-num
* Right now, in many macros we expand our child input into a new byte buffer. We can just use our output byte buffer instead and save the allocation. That buffer passed to us is basically just an arena allocator for us to play with, it doesn't need to be used just for our output.
  * This principle should be used more heavily than we are right now
  * Look at if-reg-is-ext for an example on how much cleaner this is.
  * Just be careful about macro return values being shifted
* Many of our error messages are wrong regarding the 'with' macro since we refactored it (used to be 'with' and 'with-macros', but we combined them)
* expose rel-to-abs as public function
