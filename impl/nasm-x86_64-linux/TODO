* byte buffer/arena should accept initial backing buffer size as arg
  * should allow you to say 0 for sane default mebbe?
  * make the default size SMALL. Our goal is to make sure everything stays in L1
    after program size scales. Even if it's slower now, keeping stuff small is mega-important for L1 in the future.
* use a hashmap index for names in kv_stack
* expose our internal hashmap implementation to the user
* use our bb-internal hashmap implementation in the x86_64 assembler for instruction table lookups
  * use [data [make-instruction-index]] where make-instruction index is a macro that expands into a barray of the hashmap (not BB structure).
* clean up x86_64 assembler
  * finish docs
* add size/length for data entries in bb/with
  * might only make sense for barrays
* Replace -1 as non-expand sigil: should be 0/NULL ptr now
* Does the 'with' macro need to create a new byte buffer for each data entry? Why not just push the data directly to the 'data' byte buffer then free the whole buffer when we're done?
  * Oh, this might be needed b/c we're holding pointers to the data and can't realloc
* clean up unused data entries in builtin_structural_macros
* implement elf64-relocatable (or maybe just elf-relocatable?)
  * Remove the incomplete builtin one
* don't always malloc executable, make sure macro stack mallocs executable except when serving as data stack
* are compare_barrays and barray_equalp the same function? We need to either remove one or document the difference.
* Put barray utility functions into a barray.asm, not util.asm
* make malloc not always executable (split into malloc and malloc_linux as per notes so that public malloc is never executable)
* make macro stack not always executable
* fix kv_stack_pop_by_key
* implement bb/parray-cat
* implement macroexpand-1 in structural_macro_expand
* build macroexpand "walker" macro that allows you to tap spacebar to macroexpand-1 repeatedly.
   * problem: if I macroexpand-1 a 'with' macro, he greedy macroexpands his children so you can't really watch it go very well. I really want to try to come up with a way to do this nicely. Maybe simply allow you to put bb into a mode where structural_macro_expand always stops prints and waits for spacebar after each expansion. This could be exposed via a (with-macroexpand-walker my-stuff) macro that enters and exits this mode around my-stuff.
* with-namespace
  * (with-namespace x86_64-asm (mov rdi 5) (something-else)) will apply the prefix x86_64-asm to every macro it can where there is a macro defined for that prefix. Meaning it doesn't such something-else, but does touch mov
  * It would only effect locally-visible forms AKA implemented recursively BEFORE macroexpansion
  * builtin because it's needed to make the language practical
* with-namespace-alias
  * (with-namespace-alias (asm x86_64-asm) (asm/mov rdi, 5))
  * It would only effect locally-visible forms AKA implemented recursively BEFORE macroexpansion
  * builtin because it's needed to make the language practical
* namespace all the assembler macros
* builtin function address macro changes:
  * remove "builtin-" prefix - just (bb/func-addr/foo)
  * require the user specifies the platform they want the
  function address for like (bb/func-addr/foo x86_64-linux)
  * See if there's a good way to simplify defining these macros
  inside bb. Maybe use a template macro.
* We probably want the allocator to use thread-local storage to make it thread-safe in case the user spawns threads (even though bb itself is single-threaded right now).
* line numbers in errors
* buffered writer or mmap writer to minimize those syscalls
* Expose all builtin functions that the builtin macros use
* Expose read/print builtin functions.
* Expose all kv_stack functions
* Expose all byte_buffer functions
* Expose access to global kv_stacks (like macro stacks)
* Once we have good line number errors and stuff, we should probably expose a fancy public error-exit function that produces consistent pretty errors with line numbers, macro stack dump etc.
  * Or maybe just expose the component parts - print-macro-stack-trace and print-line-num
* Right now, in many macros we expand our child input into a new byte buffer. We can just use our output byte buffer instead and save the allocation. That buffer passed to us is basically just an arena allocator for us to play with, it doesn't need to be used just for our output.
  * This principle should be used more heavily than we are right now
  * Look at if-reg-is-ext for an example on how much cleaner this is.
  * Just be careful about macro return values being shifted
* Many of our error messages are wrong regarding the 'with' macro since we refactored it (used to be 'with' and 'with-macros', but we combined them)
* Support other brackets ()[]{}<>
* memory operand normalizer for x86_64 assembler for more ergonomic memory operands like rdi+rsi+8+2
* x86_64 assembler imm* macros should accept hex literal like 0xFF and 0xFF should be considered an immediate operand type in operand-type-fn
* We're not getting as much benefit out of our caller-owned memory model with byte buffers as we could be internally right now. We should go through everything and ensure we're re-using byte buffers as much as possible.
  * Remember that we have tools to make it easy to work with relative pointers internally, then call rel_to_abs at the edge.
  * You can pass multiple unrelated functions the same byte buffer if they just append.
  * Set our allocator's spill threshold to 0 and use strace -c to observe how many allocations are happening. Try to minimize this.
* Rename byte buffer to "arena". It's basically an arena allocator and clarifies our intended access/usage patterns. Also shorter.
  * maybe instead of arena-push-int8 we say arena-push-i8
* We might be able to use arenas/byte buffers and caller-owned memory pretty much everywhere we currently use malloc. More faster.
* clean up all the commonts and unused strings in src/bbr.asm
* Set up safe_call macro instead of our current stack alignment audit strategy
* rework bb/with to have 'flags' for data entries instead of a bunch of diff names.
  * Should be able to say [data [noexpand exec threadlocal] foo]
* implement binary format bbrb
* read() should support producing both absolute and relative pointers, much like structural_macro_expand
* barray-cat should accept an element like (align 16) to pad the output to the nearest N bytes.
* Reader redesign: instead of giving reader macros names of a dispatch char, we should just call all of them one at a time walking down the reader macro stack. They can choose to consume the char or not. They can peek as much as needed.
    * If nobody consumes the char, error
    * This allows for arbitrarily complex reader macro dispatch - no more questions about multi-char dispatch or regex or whatever. Each reader macro is effectively the fully flexible king of it's own dispatch.
* Allow for peeking n chars ahead in buffered_fd_reader
  * sanity cap might be needed, but should be large
  * Make sure we can peek a bunch at once, not just per-byte
* withm doesn't quite handle the `[bb/with [stuff]]` case correctly. See TODO in function.
* kv_stack could probably be simplified to just store a pointer as it's value instead of a barray. That's all we use it for anyway.
